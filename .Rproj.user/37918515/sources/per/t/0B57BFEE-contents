library(scran)
library(scater)
library(pheatmap)
library(dplyr)
library(tibble)

Annotate <- function(sce.obj)
{
  
  ## use anyone of these packages to annotate the genes for 
  ## ids, genomic location and description
  library(Organism.dplyr)
  library(EnsDb.Hsapiens.v86)
  library(AnnotationHub)
  
  # ens.GRCh38 <- AnnotationHub()[["AH73881"]]
  # location <- mapIds(ens.GRCh38 , keys=rownames(sce.obj), keytype = ??, column = ??)
  
  ##Add gene annotation

  return(sce.obj)
}



FilterNQC <- function(sce.obj, plot.path=NULL)
{
  max_mito_frac <- 0.15
  ## find mitochondrial genes

  ## compute cell QC

  ## compute gene QC
  
  ## violin plot

  ## use `quickPerCellQC` function for filtering cells
  ## Add diagnostic plot

  ## filter by low number of detected genes & plot

  ## remove cells with high mt

  return(sce.obj)
}


Normalize <- function(sce.obj, sctransform=FALSE, plot.path=NULL)
{
  ## normalize by deconvolution 

  ## plot comparison between size factos
  
  ## challenge Q: alternative use of sctransform
  
  return(sce.obj)

}



FeatureSelection <-function(sce.obj, plot.path=NULL)
{
 
  ## model gene variance

  ## plot mean- variance

  ## select HVG either by number or FDR threshold

  return(hvg)
}



Cluster <- function(sce.obj, hvg.obj, plot.path=NULL)
{
  ## run PCA
  
  ## select meaningful number of dimensions and plot

  ## reduce dim by PCA and plot

  ## run TSNE and plot
  ## remeber to set.seed for reproducible results
  set.seed(011111)

  ## run UMAP and plot

  ## build shared nearest-neighbor graph and plot 

  ## cluster modularity and heatmap

  ## graph of clusters and plot

  return(sce.obj)
}



MarkerGenes <- function(sce.obj, plot.path=NULL)
{
  ## Find stringent markers. Only genes that are unique to each cluster 
  ## are identified. e.g. Insulin will be missed

  
  ## find any markers
  
  ## plot insulin marker


  ## find and plot markers for a specific cluster
  
  return(markers)
}



AnnotateClusters <- function(sce.obj, type.markers, plot.path=NULL)
{
  
  ## Annotate the clusters using type.markers
  
}


###########
## Main
###########

## assume <project> |
##                  |---src
##                  |---data
##                  |---results

figure.path <- "../results/"

## Load pancreas data from Baron etal. (2016)
baron.sce <- scRNAseq::BaronPancreasData('human')

## Pancreas cells gene markers. Taken from Table S2, Baron etal,  Cell Syst. 2016 Oct 26;3(4):346-360.e4.
cell.markers <- 
  tibble(cell=c("Alpha", "Beta", "Delta", "Gamma","Epsilon", "Ductal", 
                "Acinar", "Stellate","Vascular", "Macrophage", "CytotoxicT", "Mast"),
         gene=c("GCG", "INS", "SST", "PPY", "GHRL", "KRT19" ,
                "CPA1" ,"PDGFRB", "VWF", "CD163", "CD3D", "TPSAB1" ))

## Additional pancreas from Grun etal. (2016)
# grun.sce <- scRNAseq::GrunPancreasData()

## Annotrate
baron.sce <- Annotate(baron.sce)

##Filter
baron.sce <- FilterNQC(baron.sce, plot.path = figure.path)

## Normalize
baron.sce <- Normalize(baron.sce, sctransform=FALSE, plot.path= figure.path)

## Feature selection
baron.hvg <- FeatureSelection(baron.sce, plot.path = figure.path)

## cluster
baron.sce <- Cluster(baron.sce, baron.hvg, plot.path = figure.path)

## Marker genes
baron.markers <- MarkerGenes(baron.sce, plot.path = figure.path)

## Annotate clusters
AnnotateClusters(baron.sce, cell.markers, plot.path = figure.path)

## save SCE object
saveRDS(baron.sce, file = paste0("../data/BaronHumanSCE_", Sys.Date(), ".Rds"))
