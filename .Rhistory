# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
comment = NA)
# Chunk 2
library(scran)
library(scater)
library(pheatmap)
library(dplyr)
library(tibble)
# Chunk 3
baron.sce <- scRNAseq::BaronPancreasData('human')
# Chunk 4
cell.markers <-
tibble(cell=c("Alpha", "Beta", "Delta", "Gamma","Epsilon", "Ductal",
"Acinar", "Stellate","Vascular", "Macrophage", "CytotoxicT", "Mast"),
gene=c("GCG", "INS", "SST", "PPY", "GHRL", "KRT19" ,
"CPA1" ,"PDGFRB", "VWF", "CD163", "CD3D", "TPSAB1" ))
# Chunk 5
grun.sce <- scRNAseq::GrunPancreasData(ensembl = TRUE)
# Chunk 6
## use anyone of these packages to annotate the genes for
## ids, genomic location and description
# library(Organism.dplyr)
# library(EnsDb.Hsapiens.v86)
library(AnnotationHub)
ens.GRCh38 <- AnnotationHub()[["AH73881"]]
# Chunk 7
columns(ens.GRCh38)
# Chunk 8
keytypes(ens.GRCh38)
# Chunk 9
baron.keys <- rownames(baron.sce)
baron.keys[1:10]
# Chunk 10
locations <-
mapIds(ens.GRCh38,
keys = baron.keys,
keytype = "GENENAME",
column = 'GENESEQSTART')
descriptions <-
mapIds(ens.GRCh38,
keys = baron.keys,
keytype = "GENENAME",
column = 'DESCRIPTION')
chromosomes <-
mapIds(ens.GRCh38,
keys = baron.keys,
keytype = "GENENAME",
column = 'SEQNAME')
baron.rowdata <-
data.frame(Gene_Name = baron.keys,
Gene_Location = locations,
Gene_Description = descriptions)
rowData(baron.sce) <- baron.rowdata
# Chunk 11
rownames(baron.sce) %>%
grep('^MT', x = ., value = TRUE)
# Chunk 12
chromosomes %>%
unique
# Chunk 13
max_mito_frac <- 0.15
## find mitochondrial genes
## compute cell QC
## compute gene QC
## violin plot
## use `quickPerCellQC` function for filtering cells
## Add diagnostic plot
## filter by low number of detected genes & plot
## remove cells with high mt
baron.sce <- FilterNQC(baron.sce, plot.path = figure.path)
# Chunk 14
bpparam <- BiocParallel::MulticoreParam(workers = 12,
progressbar = TRUE)
baron.clusters <- quickCluster(baron.sce,
BPPARAM = bpparam)
## normalize by deconvolution
baron.deconv.sf <-
scran::calculateSumFactors(baron.sce,
clusters = baron.clusters,
BPPARAM = bpparam)
# Original size factors
baron.lib.sf <- librarySizeFactors(baron.sce)
plot_colors <-
baron.sce %>%
.$label %>%
factor()
# plot comparison between size factos
data.frame(x = log(baron.lib.sf),
y = log(baron.deconv.sf),
color = plot_colors) %>%
ggplot() +
geom_point(aes(x = x, y = y, color = color)) +
geom_abline(slope = 1, intercept = 0) +
xlab("log(Library size factor)") +
ylab("log(Deconvolution size factor)")
## challenge Q: alternative use of sctransform
sctransform <- FALSE
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
comment = NA)
ratio <-
bluster::pairwiseModularity(baron.ssngraph,
clusters$membership,
as.ratio=TRUE)
ratio <-
bluster::pairwiseModularity(baron.ssngraph,
clusters$membership,
as.ratio=TRUE)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
comment = NA)
library(scran)
library(dplyr)
library(scater)
library(tibble)
library(pheatmap)
library(RColorBrewer)
baron.sce <- scRNAseq::BaronPancreasData('human')
cell.markers <-
tibble(cell=c("Alpha", "Beta", "Delta", "Gamma","Epsilon", "Ductal",
"Acinar", "Stellate","Vascular", "Macrophage", "CytotoxicT", "Mast"),
gene=c("GCG", "INS", "SST", "PPY", "GHRL", "KRT19" ,
"CPA1" ,"PDGFRB", "VWF", "CD163", "CD3D", "TPSAB1" ))
# grun.sce <- scRNAseq::GrunPancreasData()
library(AnnotationHub)
ens.GRCh38 <- AnnotationHub()[["AH73881"]]
columns(ens.GRCh38)
keytypes(ens.GRCh38)
baron.keys <- rownames(baron.sce)
baron.keys[1:10]
locations <-
mapIds(ens.GRCh38,
keys = baron.keys,
keytype = "GENENAME",
column = 'GENESEQSTART')
chromosomes <-
mapIds(ens.GRCh38,
keys = baron.keys,
keytype = "GENENAME",
column = 'SEQNAME')
descriptions <-
mapIds(ens.GRCh38,
keys = baron.keys,
keytype = "GENENAME",
column = 'DESCRIPTION')
rowData(baron.sce) <-
data.frame(Gene_Name = baron.keys,
Gene_Location = locations,
Gene_Description = descriptions)
rownames(baron.sce) %>%
grep('^MT', x = ., value = TRUE)
chromosomes %>%
unique
baron.sce <- addPerCellQC(baron.sce)
baron.sce %>%
colData() %>%
head()
baron.qc.rna_counts <-
scater::isOutlier(baron.sce$sum,
log = TRUE,
type="lower",
# batch=baron.sce$donor
)
attr(baron.qc.rna_counts, 'thresholds')
baron.qc.gene_counts <-
scater::isOutlier(baron.sce$detected,
log = TRUE,
type="lower",
# batch=baron.sce$donor
)
attr(baron.qc.gene_counts, "thresholds")
reasons <- quickPerCellQC(baron.sce)
colSums(as.matrix(reasons))
plotColData(baron.sce,
x="donor",
y="detected",
colour_by = 'donor')
colData(baron.sce) %>%
as.data.frame() %>%
ggplot() +
geom_point(aes(x = detected,
y = sum),
color = 'deepskyblue',
pch = 21, alpha = 0.3) +
xlab('# Detected Genes (cell)') + ylab('Sum of total RNA-seq Counts (cell)')
bpparam <- BiocParallel::MulticoreParam(workers = 6)
baron.clusters <- quickCluster(baron.sce,
BPPARAM = bpparam)
# Normalize by deconvolution
baron.deconv.sf <-
scran::calculateSumFactors(baron.sce,
clusters = baron.clusters,
BPPARAM = bpparam)
# Original size factors
baron.lib.sf <- librarySizeFactors(baron.sce)
plot_colors <-
baron.sce %>%
.$label %>%
factor()
# Plot comparison between size factos
data.frame(x = log(baron.lib.sf),
y = log(baron.deconv.sf),
color = plot_colors) %>%
ggplot() +
geom_point(aes(x = x, y = y, color = color)) +
geom_abline(slope = 1, intercept = 0) +
xlab("log(Library size factor)") +
ylab("log(Deconvolution size factor)")
baron.sce <- logNormCounts(baron.sce,
BPPARAM = bpparam)
## model gene variance
baron.dce <- scran::modelGeneVar(baron.sce,
BPPARAM = bpparam)
## plot mean- variance
baron.fit <- metadata(baron.dce)
data.frame(x = baron.fit$mean,
y = baron.fit$var) %>%
ggplot() +
geom_point(aes(x = x, y = y),
color = 'deepskyblue') +
stat_function(fun = baron.fit$trend,
aes(color = 'Trend Curve')) +
scale_color_manual(values =
c('Trend Curve' = 'gray36')) +
xlab('Mean') + ylab('Variance') +
theme(legend.title = element_blank())
baron.dce <-
baron.dce %>%
.[!is.na(.$FDR), ]
sorted_order <- order(baron.dce$bio, decreasing=TRUE)
baron.dce %>%
.[sorted_order[1:10], ]
baron.hvg <-
getTopHVGs(baron.dce,
fdr.threshold = 0.01)
baron.hvg %>%
length() %>%
cat('genes determined to be significant')
baron.sce <- runPCA(baron.sce,
subset_row = baron.hvg)
reducedDimNames(baron.sce)
percent.var <-
attr(reducedDim(baron.sce),
"percentVar")
data.frame(x = seq_along(percent.var),
y = percent.var) %>%
ggplot() +
geom_point(aes(x = x, y = y)) +
geom_vline(aes(xintercept = 6.5,
color = 'Elbow Point'),
lty = 2) +
xlab('Principle Component #') +
ylab("Variance explained (%)") +
scale_color_manual(values = c('Elbow Point' = 'red')) +
theme(legend.title = element_blank())
chosen.elbow <-
PCAtools::findElbowPoint(percent.var)
chosen.elbow
reducedDim(baron.sce,
"PCA.elbow") <-
reducedDim(baron.sce)[ ,1:chosen.elbow]
reducedDimNames(baron.sce)
plotReducedDim(baron.sce,
dimred="PCA",
colour_by="donor")
plotReducedDim(baron.sce,
dimred = "PCA",
ncomponents = 4,
colour_by = "donor")
set.seed(497)
baron.sce <-
runTSNE(baron.sce,
dimred="PCA",
BPPARAM = bpparam)
plotReducedDim(baron.sce,
dimred="TSNE",
colour_by="label")
baron.sce <- runUMAP(baron.sce,
dimred="PCA",
BPPARAM = bpparam)
plotReducedDim(baron.sce,
dimred="UMAP",
colour_by="donor")
## build shared nearest-neighbor graph and plot
baron.ssngraph <-
buildSNNGraph(baron.sce,
k=30,
use.dimred = 'PCA.elbow',
BPPARAM = bpparam)
clusters <- igraph::cluster_walktrap(baron.ssngraph)
table(clusters$membership)
library(bluster)
clust2 <-
clusterRows(
reducedDim(baron.sce, "PCA.elbow"),
NNGraphParam())
table(clust2)
baron.sce <- runUMAP(baron.sce,
dimred="PCA",
BPPARAM = bpparam)
gridExtra::grid.arrange(
plotReducedDim(baron.sce,
dimred="UMAP",
colour_by="label"),
plotReducedDim(baron.sce,
dimred="UMAP",
colour_by="donor"),
nrow = 1
)
gridExtra::grid.arrange(
plotReducedDim(baron.sce,
dimred="TSNE",
colour_by="label"),
plotReducedDim(baron.sce,
dimred="TSNE",
colour_by="donor"),
nrow = 1
)
gridExtra::grid.arrange(
plotReducedDim(baron.sce,
dimred="TSNE",
colour_by="label"),
plotReducedDim(baron.sce,
dimred="TSNE",
colour_by="donor"),
ncol = 1
)
gridExtra::grid.arrange(
plotReducedDim(baron.sce,
dimred="PCA",
colour_by="donor"),
plotReducedDim(baron.sce,
dimred="PCA",
colour_by="label"),
nrow = 1
)
gridExtra::grid.arrange(
plotReducedDim(baron.sce,
dimred="PCA",
colour_by="donor",
add_legend = FALSE),
plotReducedDim(baron.sce,
dimred="PCA",
colour_by="label",
add_legend = FALSE),
nrow = 1
)
gridExtra::grid.arrange(
plotReducedDim(baron.sce,
dimred="PCA",
colour_by="label",
add_legend = FALSE,
other_fields = list(title = 'hello')),
plotReducedDim(baron.sce,
dimred="PCA",
colour_by="donor",
add_legend = FALSE),
nrow = 1
)
plotReducedDim(baron.sce,
dimred="PCA",
colour_by="label")
plotReducedDim(baron.sce,
dimred="PCA",
colour_by="donor")
interesting_cluster <- baron.markers.up[[chosen]]
